// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ML;
using Microsoft.ML.Data;
using WebApplication1ML.Model;

namespace WebApplication1ML.Model
{
    public class ConsumeModel
    {
        private static Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictionEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(CreatePredictionEngine);

        // For more info on consuming ML.NET models, visit https://aka.ms/mlnet-consume
        // Method for consuming model in your app
        public static ModelOutput Predict(ModelInput input)
        {
            ModelOutput result = PredictionEngine.Value.Predict(input);
            return result;
        }

        public static List<ScoreOutput> GetScores(ModelInput input)
        {
            return getScores(Predict(input));
        }

        public static List<ScoreOutput> GetScores(ModelOutput result)
        {
            List<ScoreOutput> output = new List<ScoreOutput>();
            try
            {
                var Score = PredictionEngine.Value.OutputSchema["Score"];
                VBuffer<ReadOnlyMemory<char>> buf = default;
                Score.Annotations.GetValue("SlotNames", ref buf);
                var labels = buf.DenseValues().Select(x => x.ToString()).ToList();
                for (int i = 0; i < labels.Count; i++)
                {
                    output.Add(new ScoreOutput(labels[i], result.Score[i]));
                }

            }
            catch (Exception) { }
            output.OrderByDescending(item => item.Score);
            return output;
        }
        public static PredictionEngine<ModelInput, ModelOutput> CreatePredictionEngine()
        {
            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\incen\AppData\Local\Temp\MLVSTools\WebApplication1ML\WebApplication1ML.Model\MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);

            return predEngine;
        }
    }

    public class ScoreOutput
    {
        public ScoreOutput(string _label, float _score)
        {
            Label = _label;
            Score = _score;
            ScorePercent = (_score / 1) * 100;
        }
        public float Score { get; private set; }
        public float ScorePercent { get; private set; }
        public string Label { get; private set; }
    }
}
