// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ML;
using Microsoft.ML.Data;
using WebApplication1ML.Model;

namespace WebApplication1ML.Model
{
    public class ConsumeModel
    {
        private static Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictionEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(CreatePredictionEngine);

        // For more info on consuming ML.NET models, visit https://aka.ms/mlnet-consume
        // Method for consuming model in your app


        public static ModelOutput Predict(ModelInput input)
        {
            ModelOutput result = PredictionEngine.Value.Predict(input);
            return result;
        }

        public static Dictionary<string, float> getScoreDictionary(ModelInput input)
        {
            return getScoreDictionary(Predict(input));
        }

        public static Dictionary<string, float> getScoreDictionary(ModelOutput result)
        {
            Dictionary<string, float> output = new Dictionary<string, float>();
            try
            {
                var Score = PredictionEngine.Value.OutputSchema["Score"];
                VBuffer<ReadOnlyMemory<char>> buf = default;
                Score.Annotations.GetValue("SlotNames", ref buf);
                var labels = buf.DenseValues().Select(x => x.ToString()).ToList();
                for (int i = 0; i < labels.Count; i++)
                {
                    output.Add(labels[i], result.Score[i]);
                }

            }
            catch (Exception) { }
            return output;
        }

        public static PredictionEngine<ModelInput, ModelOutput> CreatePredictionEngine()
        {
            // Create new MLContext
            MLContext mlContext = new MLContext();

            // Load model & create prediction engine
            string modelPath = @"C:\Users\incen\AppData\Local\Temp\MLVSTools\WebApplication1ML\WebApplication1ML.Model\MLModel.zip";
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            var predEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
            return predEngine;
        }
    }
}
